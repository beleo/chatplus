{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:importer-hipchat/server.js","meteor://ðŸ’»app/packages/rocketchat:importer-hipchat/main.js"],"names":["moment","module","watch","require","v","Importer","HipChat","name","descriptionI18N","mimeType","logger","debug","userTags","prepare","dataURI","sentContentType","fileName","image","RocketChatFile","dataURIParse","zip","AdmZip","Buffer","zipEntries","getEntries","tempRooms","tempUsers","tempMessages","forEach","entry","entryName","indexOf","isDirectory","RoomPrefix","roomName","split","updateProgress","ProgressStep","PREPARING_CHANNELS","JSON","parse","getData","toString","rooms","room","_","slugify","item","msgGroupData","error","warn","UsersPrefix","usersName","PREPARING_USERS","users","usersId","collection","insert","importRecord","_id","findOne","updateRecord","length","addCountToTotal","channelsId","channels","PREPARING_MESSAGES","messagesCount","Object","keys","messagesObj","channel","messages","msgs","date","Base","getBSONSize","MaxBSONSize","getBSONSafeArraysFromAnArray","splitMsg","i","messagesId","ERROR","getProgress","selectionUsers","map","user","SelectionUser","user_id","email","is_deleted","is_bot","selectionChannels","SelectionChannel","room_id","is_archived","selectionMessages","count","USER_SELECTION","Selection","startImport","importSelection","start","Date","now","u","do_import","update","$set","c","channel_id","startedByUserId","Meteor","userId","defer","IMPORTING_USERS","runAsUser","existantUser","RocketChat","models","Users","findOneByEmailAddress","rocketId","push","hipchat","mention_name","rocket","username","Accounts","createUser","password","toUpperCase","call","joinDefaultChannelsSilenced","photo_url","undefined","parseInt","tz","timezone","format","setName","addCountCompleted","IMPORTING_CHANNELS","replace","existantRoom","Rooms","findOneByName","owner_user_id","returned","rid","created","IMPORTING_MESSAGES","nousers","hipchatChannel","getHipChatChannelFromName","findOneById","fields","usernames","t","message","from","getRocketUser","msgObj","msg","convertHipChatMessageToRocketChat","ts","sendMessage","isArray","console","FINISHING","DONE","timeTook","log","channelName","find","hipchatId","userReplace","getSelection","addImporter"],"mappings":"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","file":"/packages/rocketchat_importer-hipchat.js","sourcesContent":["/* globals Importer */\nimport moment from 'moment';\n\nimport 'moment-timezone';\n\nImporter.HipChat = Importer.HipChat = (function() {\n\tclass HipChat extends Importer.Base {\n\t\tconstructor(name, descriptionI18N, mimeType) {\n\t\t\tsuper(name, descriptionI18N, mimeType);\n\t\t\tthis.logger.debug('Constructed a new Slack Importer.');\n\t\t\tthis.userTags = [];\n\t\t}\n\n\t\tprepare(dataURI, sentContentType, fileName) {\n\t\t\tsuper.prepare(dataURI, sentContentType, fileName);\n\t\t\tconst image = RocketChatFile.dataURIParse(dataURI).image;\n\t\t\t// const contentType = ref.contentType;\n\t\t\tconst zip = new this.AdmZip(new Buffer(image, 'base64'));\n\t\t\tconst zipEntries = zip.getEntries();\n\t\t\tconst tempRooms = [];\n\t\t\tlet tempUsers = [];\n\t\t\tconst tempMessages = {};\n\n\t\t\tzipEntries.forEach(entry => {\n\t\t\t\tif (entry.entryName.indexOf('__MACOSX') > -1) {\n\t\t\t\t\tthis.logger.debug(`Ignoring the file: ${ entry.entryName }`);\n\t\t\t\t}\n\t\t\t\tif (entry.isDirectory) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (entry.entryName.indexOf(Importer.HipChat.RoomPrefix) > -1) {\n\t\t\t\t\tlet roomName = entry.entryName.split(Importer.HipChat.RoomPrefix)[1];\n\t\t\t\t\tif (roomName === 'list.json') {\n\t\t\t\t\t\tthis.updateProgress(Importer.ProgressStep.PREPARING_CHANNELS);\n\t\t\t\t\t\tconst tempRooms = JSON.parse(entry.getData().toString()).rooms;\n\t\t\t\t\t\ttempRooms.forEach(room => {\n\t\t\t\t\t\t\troom.name = _.slugify(room.name);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (roomName.indexOf('/') > -1) {\n\t\t\t\t\t\tconst item = roomName.split('/');\n\t\t\t\t\t\troomName = _.slugify(item[0]);\n\t\t\t\t\t\tconst msgGroupData = item[1].split('.')[0];\n\t\t\t\t\t\tif (!tempMessages[roomName]) {\n\t\t\t\t\t\t\ttempMessages[roomName] = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn tempMessages[roomName][msgGroupData] = JSON.parse(entry.getData().toString());\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\treturn this.logger.warn(`${ entry.entryName } is not a valid JSON file! Unable to import it.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (entry.entryName.indexOf(Importer.HipChat.UsersPrefix) > -1) {\n\t\t\t\t\tconst usersName = entry.entryName.split(Importer.HipChat.UsersPrefix)[1];\n\t\t\t\t\tif (usersName === 'list.json') {\n\t\t\t\t\t\tthis.updateProgress(Importer.ProgressStep.PREPARING_USERS);\n\t\t\t\t\t\treturn tempUsers = JSON.parse(entry.getData().toString()).users;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.logger.warn(`Unexpected file in the ${ this.name } import: ${ entry.entryName }`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst usersId = this.collection.insert({\n\t\t\t\t'import': this.importRecord._id,\n\t\t\t\t'importer': this.name,\n\t\t\t\t'type': 'users',\n\t\t\t\t'users': tempUsers\n\t\t\t});\n\t\t\tthis.users = this.collection.findOne(usersId);\n\t\t\tthis.updateRecord({\n\t\t\t\t'count.users': tempUsers.length\n\t\t\t});\n\t\t\tthis.addCountToTotal(tempUsers.length);\n\t\t\tconst channelsId = this.collection.insert({\n\t\t\t\t'import': this.importRecord._id,\n\t\t\t\t'importer': this.name,\n\t\t\t\t'type': 'channels',\n\t\t\t\t'channels': tempRooms\n\t\t\t});\n\t\t\tthis.channels = this.collection.findOne(channelsId);\n\t\t\tthis.updateRecord({\n\t\t\t\t'count.channels': tempRooms.length\n\t\t\t});\n\t\t\tthis.addCountToTotal(tempRooms.length);\n\t\t\tthis.updateProgress(Importer.ProgressStep.PREPARING_MESSAGES);\n\t\t\tlet messagesCount = 0;\n\t\t\tObject.keys(tempMessages).forEach(channel => {\n\t\t\t\tconst messagesObj = tempMessages[channel];\n\t\t\t\tthis.messages[channel] = this.messages[channel] || {};\n\t\t\t\tObject.keys(messagesObj).forEach(date => {\n\t\t\t\t\tconst msgs = messagesObj[date];\n\t\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\t\tthis.updateRecord({\n\t\t\t\t\t\t'messagesstatus': `${ channel }/${ date }`\n\t\t\t\t\t});\n\t\t\t\t\tif (Importer.Base.getBSONSize(msgs) > Importer.Base.MaxBSONSize) {\n\t\t\t\t\t\tImporter.Base.getBSONSafeArraysFromAnArray(msgs).forEach((splitMsg, i) => {\n\t\t\t\t\t\t\tconst messagesId = this.collection.insert({\n\t\t\t\t\t\t\t\t'import': this.importRecord._id,\n\t\t\t\t\t\t\t\t'importer': this.name,\n\t\t\t\t\t\t\t\t'type': 'messages',\n\t\t\t\t\t\t\t\t'name': `${ channel }/${ date }.${ i }`,\n\t\t\t\t\t\t\t\t'messages': splitMsg\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthis.messages[channel][`${ date }.${ i }`] = this.collection.findOne(messagesId);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst messagesId = this.collection.insert({\n\t\t\t\t\t\t\t'import': this.importRecord._id,\n\t\t\t\t\t\t\t'importer': this.name,\n\t\t\t\t\t\t\t'type': 'messages',\n\t\t\t\t\t\t\t'name': `${ channel }/${ date }`,\n\t\t\t\t\t\t\t'messages': msgs\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.messages[channel][date] = this.collection.findOne(messagesId);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis.updateRecord({\n\t\t\t\t'count.messages': messagesCount,\n\t\t\t\t'messagesstatus': null\n\t\t\t});\n\t\t\tthis.addCountToTotal(messagesCount);\n\t\t\tif (tempUsers.length === 0 || tempRooms.length === 0 || messagesCount === 0) {\n\t\t\t\tthis.logger.warn(`The loaded users count ${ tempUsers.length }, the loaded channels ${ tempRooms.length }, and the loaded messages ${ messagesCount }`);\n\t\t\t\tthis.updateProgress(Importer.ProgressStep.ERROR);\n\t\t\t\treturn this.getProgress();\n\t\t\t}\n\t\t\tconst selectionUsers = tempUsers.map(function(user) {\n\t\t\t\treturn new Importer.SelectionUser(user.user_id, user.name, user.email, user.is_deleted, false, !user.is_bot);\n\t\t\t});\n\t\t\tconst selectionChannels = tempRooms.map(function(room) {\n\t\t\t\treturn new Importer.SelectionChannel(room.room_id, room.name, room.is_archived, true, false);\n\t\t\t});\n\t\t\tconst selectionMessages = this.importRecord.count.messages;\n\t\t\tthis.updateProgress(Importer.ProgressStep.USER_SELECTION);\n\t\t\treturn new Importer.Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n\t\t}\n\n\t\tstartImport(importSelection) {\n\t\t\tsuper.startImport(importSelection);\n\t\t\tconst start = Date.now();\n\t\t\timportSelection.users.forEach(user => {\n\t\t\t\tthis.users.users.forEach(u => {\n\t\t\t\t\tif (u.user_id === user.user_id) {\n\t\t\t\t\t\tu.do_import = user.do_import;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis.collection.update({_id: this.users._id}, { $set: { 'users': this.users.users } });\n\t\t\timportSelection.channels.forEach(channel =>\n\t\t\t\tthis.channels.channels.forEach(c => c.room_id === channel.channel_id && (c.do_import = channel.do_import))\n\t\t\t);\n\t\t\tthis.collection.update({ _id: this.channels._id }, { $set: { 'channels': this.channels.channels }});\n\t\t\tconst startedByUserId = Meteor.userId();\n\t\t\tMeteor.defer(() => {\n\t\t\t\tthis.updateProgress(Importer.ProgressStep.IMPORTING_USERS);\n\t\t\t\tthis.users.users.forEach(user => {\n\t\t\t\t\tif (!user.do_import) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst existantUser = RocketChat.models.Users.findOneByEmailAddress(user.email);\n\t\t\t\t\t\tif (existantUser) {\n\t\t\t\t\t\t\tuser.rocketId = existantUser._id;\n\t\t\t\t\t\t\tthis.userTags.push({\n\t\t\t\t\t\t\t\thipchat: `@${ user.mention_name }`,\n\t\t\t\t\t\t\t\trocket: `@${ existantUser.username }`\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst userId = Accounts.createUser({\n\t\t\t\t\t\t\t\temail: user.email,\n\t\t\t\t\t\t\t\tpassword: Date.now() + user.name + user.email.toUpperCase()\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tuser.rocketId = userId;\n\t\t\t\t\t\t\tthis.userTags.push({\n\t\t\t\t\t\t\t\thipchat: `@${ user.mention_name }`,\n\t\t\t\t\t\t\t\trocket: `@${ user.mention_name }`\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tMeteor.call('setUsername', user.mention_name, {\n\t\t\t\t\t\t\t\t\tjoinDefaultChannelsSilenced: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tMeteor.call('setAvatarFromService', user.photo_url, undefined, 'url');\n\t\t\t\t\t\t\t\treturn Meteor.call('userSetUtcOffset', parseInt(moment().tz(user.timezone).format('Z').toString().split(':')[0]));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (user.name != null) {\n\t\t\t\t\t\t\t\tRocketChat.models.Users.setName(userId, user.name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (user.is_deleted) {\n\t\t\t\t\t\t\t\tMeteor.call('setUserActiveStatus', userId, false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tthis.collection.update({ _id: this.users._id }, { $set: { 'users': this.users.users }});\n\t\t\t\tthis.updateProgress(Importer.ProgressStep.IMPORTING_CHANNELS);\n\t\t\t\tthis.channels.channels.forEach(channel => {\n\t\t\t\t\tif (!channel.do_import) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tchannel.name = channel.name.replace(/ /g, '');\n\t\t\t\t\t\tconst existantRoom = RocketChat.models.Rooms.findOneByName(channel.name);\n\t\t\t\t\t\tif (existantRoom) {\n\t\t\t\t\t\t\tchannel.rocketId = existantRoom._id;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet userId = '';\n\t\t\t\t\t\t\tthis.users.users.forEach(user => {\n\t\t\t\t\t\t\t\tif (user.user_id === channel.owner_user_id) {\n\t\t\t\t\t\t\t\t\tuserId = user.rocketId;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (userId === '') {\n\t\t\t\t\t\t\t\tthis.logger.warn(`Failed to find the channel creator for ${ channel.name }, setting it to the current running user.`);\n\t\t\t\t\t\t\t\tuserId = startedByUserId;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tconst returned = Meteor.call('createChannel', channel.name, []);\n\t\t\t\t\t\t\t\treturn channel.rocketId = returned.rid;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({\n\t\t\t\t\t\t\t\t_id: channel.rocketId\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\t\t\t'ts': new Date(channel.created * 1000)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tthis.collection.update({\n\t\t\t\t\t_id: this.channels._id\n\t\t\t\t}, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\t'channels': this.channels.channels\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis.updateProgress(Importer.ProgressStep.IMPORTING_MESSAGES);\n\t\t\t\tconst nousers = {};\n\n\t\t\t\tObject.keys(this.messages).forEach(channel => {\n\t\t\t\t\tconst messagesObj = this.messages[channel];\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst hipchatChannel = this.getHipChatChannelFromName(channel);\n\t\t\t\t\t\tif (hipchatChannel != null ? hipchatChannel.do_import : undefined) {\n\t\t\t\t\t\t\tconst room = RocketChat.models.Rooms.findOneById(hipchatChannel.rocketId, {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tusernames: 1,\n\t\t\t\t\t\t\t\t\tt: 1,\n\t\t\t\t\t\t\t\t\tname: 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tObject.keys(messagesObj).forEach(date => {\n\t\t\t\t\t\t\t\tconst msgs = messagesObj[date];\n\t\t\t\t\t\t\t\tthis.updateRecord({\n\t\t\t\t\t\t\t\t\t'messagesstatus': `${ channel }/${ date }.${ msgs.messages.length }`\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tmsgs.messages.forEach(message => {\n\t\t\t\t\t\t\t\t\tif (message.from != null) {\n\t\t\t\t\t\t\t\t\t\tconst user = this.getRocketUser(message.from.user_id);\n\t\t\t\t\t\t\t\t\t\tif (user != null) {\n\t\t\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: this.convertHipChatMessageToRocketChat(message.message),\n\t\t\t\t\t\t\t\t\t\t\t\tts: new Date(message.date),\n\t\t\t\t\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\t\t\t\t\t\t\tusername: user.username\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(user, msgObj, room, true);\n\t\t\t\t\t\t\t\t\t\t} else if (!nousers[message.from.user_id]) {\n\t\t\t\t\t\t\t\t\t\t\tnousers[message.from.user_id] = message.from;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if (!_.isArray(message)) {\n\t\t\t\t\t\t\t\t\t\tconsole.warn('Please report the following:', message);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tthis.addCountCompleted(1);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tthis.logger.warn('The following did not have users:', nousers);\n\t\t\t\tthis.updateProgress(Importer.ProgressStep.FINISHING);\n\t\t\t\tthis.channels.channels.forEach(channel => {\n\t\t\t\t\tif (channel.do_import && channel.is_archived) {\n\t\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\t\treturn Meteor.call('archiveRoom', channel.rocketId);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis.updateProgress(Importer.ProgressStep.DONE);\n\t\t\t\tconst timeTook = Date.now() - start;\n\t\t\t\treturn this.logger.log(`Import took ${ timeTook } milliseconds.`);\n\t\t\t});\n\t\t\treturn this.getProgress();\n\t\t}\n\n\t\tgetHipChatChannelFromName(channelName) {\n\t\t\treturn this.channels.channels.find(channel => channel.name === channelName);\n\t\t}\n\n\t\tgetRocketUser(hipchatId) {\n\t\t\tconst user = this.users.users.find(user => user.user_id === hipchatId);\n\t\t\treturn user ? RocketChat.models.Users.findOneById(user.rocketId, {\n\t\t\t\tfields: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tname: 1\n\t\t\t\t}\n\t\t\t}) : undefined;\n\t\t}\n\n\t\tconvertHipChatMessageToRocketChat(message) {\n\t\t\tif (message != null) {\n\t\t\t\tthis.userTags.forEach(userReplace => {\n\t\t\t\t\tmessage = message.replace(userReplace.hipchat, userReplace.rocket);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tmessage = '';\n\t\t\t}\n\t\t\treturn message;\n\t\t}\n\n\t\tgetSelection() {\n\t\t\tconst selectionUsers = this.users.users.map(function(user) {\n\t\t\t\treturn new Importer.SelectionUser(user.user_id, user.name, user.email, user.is_deleted, false, !user.is_bot);\n\t\t\t});\n\t\t\tconst selectionChannels = this.channels.channels.map(function(room) {\n\t\t\t\treturn new Importer.SelectionChannel(room.room_id, room.name, room.is_archived, true, false);\n\t\t\t});\n\t\t\tconst selectionMessages = this.importRecord.count.messages;\n\t\t\treturn new Importer.Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n\t\t}\n\n\t}\n\n\tHipChat.RoomPrefix = 'hipchat_export/rooms/';\n\n\tHipChat.UsersPrefix = 'hipchat_export/users/';\n\n\treturn HipChat;\n\n}());\n","/* globals Importer */\n\nImporter.addImporter('hipchat', Importer.HipChat, {\n\tname: 'HipChat',\n\tmimeType: 'application/zip'\n});\n"]}