{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:importer/lib/_importer.js","meteor://ðŸ’»app/packages/rocketchat:importer/lib/importTool.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/classes/ImporterBase.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/classes/ImporterProgress.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/classes/ImporterProgressStep.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/classes/ImporterSelection.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/classes/ImporterSelectionChannel.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/classes/ImporterSelectionUser.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/models/Imports.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/models/RawImports.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/methods/getImportProgress.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/methods/getSelectionData.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/methods/prepareImport.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/methods/restartImport.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/methods/setupImporter.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/methods/startImport.js","meteor://ðŸ’»app/packages/rocketchat:importer/server/startup/setImportsToInvalid.js"],"names":["Importer","module","exportDefault","Importers","addImporter","name","importer","options","mimeType","warnings","http","watch","require","v","https","AdmZip","getFileType","Base","getBSONSize","object","native","BSON","bson","calculateObjectSize","getBSONSafeArraysFromAnArray","theArray","BSONSize","maxSize","Math","floor","length","ceil","MaxBSONSize","safeArrays","i","push","slice","description","prepare","bind","startImport","getSelection","getProgress","updateProgress","addCountToTotal","addCountCompleted","updateRecord","uploadFile","logger","Logger","progress","Progress","collection","RawImports","importId","Imports","insert","Date","now","step","Meteor","user","_id","importRecord","findOne","users","channels","messages","oldSettings","dataURI","sentContentType","fileName","fileType","Buffer","split","debug","mime","warn","ProgressStep","ERROR","Error","PREPARING_STARTED","importSelection","undefined","IMPORTING_STARTED","Accounts_AllowedDomainsList","RocketChat","models","Settings","findOneById","value","updateValueById","Accounts_AllowUsernameChange","DONE","count","total","completed","fields","update","$set","details","fileUrl","room","timeStamp","requestModule","test","fileStore","FileUpload","getStore","get","bindEnvironment","res","rawData","on","chunk","concat","err","file","url","replace","absoluteUrl","attachment","title","title_link","type","image_url","image_type","image_size","size","image_dimensions","identify","audio_url","audio_type","audio_size","video_url","video_type","video_size","msg","rid","ts","groupable","attachments","message_id","sendMessage","NEW","Object","freeze","PREPARING_USERS","PREPARING_CHANNELS","PREPARING_MESSAGES","USER_SELECTION","IMPORTING_USERS","IMPORTING_CHANNELS","IMPORTING_MESSAGES","FINISHING","CANCELLED","Selection","message_count","SelectionChannel","channel_id","is_archived","do_import","is_private","SelectionUser","user_id","username","email","is_deleted","is_bot","_Base","methods","getImportProgress","userId","method","authz","hasPermission","importerInstance","getSelectionData","prepareImport","contentType","check","String","results","Promise","catch","e","restartImport","valid","setupImporter","console","input","usersSelection","map","channelsSelection","channel","selection","startup","$ne","multi","find","forEach","remove","item"],"mappings":"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","file":"/packages/rocketchat_importer.js","sourcesContent":["/* globals Importer */\nImporter = {};\nexport default Importer;\n","/* globals Importer */\nImporter.Importers = {};\n\nImporter.addImporter = function(name, importer, options) {\n\tif (Importer.Importers[name] == null) {\n\t\treturn Importer.Importers[name] = {\n\t\t\tname: options.name,\n\t\t\timporter,\n\t\t\tmimeType: options.mimeType,\n\t\t\twarnings: options.warnings\n\t\t};\n\t}\n};\n","/* globals Importer */\n// Base class for all Importers.\n//\n// @example How to subclass an importer\n// \tclass ExampleImporter extends RocketChat.importTool._baseImporter\n//\t\tconstructor: ->\n//\t\t\tsuper('Name of Importer', 'Description of the importer, use i18n string.', new RegExp('application\\/.*?zip'))\n//\t\tprepare: (uploadedFileData, uploadedFileContentType, uploadedFileName) =>\n//\t\t\tsuper\n//\t\tstartImport: (selectedUsersAndChannels) =>\n//\t\t\tsuper\n//\t\tgetProgress: =>\n//\t\t\t#return the progress report, tbd what is expected\n// @version 1.0.0\nimport http from 'http';\nimport https from 'https';\nimport AdmZip from 'adm-zip';\nimport getFileType from 'file-type';\n\nImporter.Base = class Base {\n\tstatic getBSONSize(object) {\n\t\t// The max BSON object size we can store in MongoDB is 16777216 bytes\n\t\t// but for some reason the mongo instanace which comes with meteor\n\t\t// errors out for anything close to that size. So, we are rounding it\n\t\t// down to 8000000 bytes.\n\t\tconst { BSON } = require('bson').native();\n\t\tconst bson = new BSON();\n\t\treturn bson.calculateObjectSize(object);\n\t}\n\n\tstatic getBSONSafeArraysFromAnArray(theArray) {\n\t\tconst BSONSize = Importer.Base.getBSONSize(theArray);\n\t\tconst maxSize = Math.floor(theArray.length / (Math.ceil(BSONSize / Importer.Base.MaxBSONSize)));\n\t\tconst safeArrays = [];\n\t\tlet i = 0;\n\t\twhile (i < theArray.length) {\n\t\t\tsafeArrays.push(theArray.slice(i, (i += maxSize)));\n\t\t}\n\t\treturn safeArrays;\n\t}\n\n\t// Constructs a new importer, adding an empty collection, AdmZip property, and empty users & channels\n\t//\n\t// @param [String] name the name of the Importer\n\t// @param [String] description the i18n string which describes the importer\n\t// @param [String] mimeType the of the expected file type\n\t//\n\tconstructor(name, description, mimeType) {\n\t\tthis.http = http;\n\t\tthis.https = https;\n\t\tthis.AdmZip = AdmZip;\n\t\tthis.getFileType = getFileType;\n\n\t\tthis.MaxBSONSize = 8000000;\n\t\tthis.prepare = this.prepare.bind(this);\n\t\tthis.startImport = this.startImport.bind(this);\n\t\tthis.getSelection = this.getSelection.bind(this);\n\t\tthis.getProgress = this.getProgress.bind(this);\n\t\tthis.updateProgress = this.updateProgress.bind(this);\n\t\tthis.addCountToTotal = this.addCountToTotal.bind(this);\n\t\tthis.addCountCompleted = this.addCountCompleted.bind(this);\n\t\tthis.updateRecord = this.updateRecord.bind(this);\n\t\tthis.uploadFile = this.uploadFile.bind(this);\n\n\t\tthis.name = name;\n\t\tthis.description = description;\n\t\tthis.mimeType = mimeType;\n\n\t\tthis.logger = new Logger(`${ this.name } Importer`, {});\n\t\tthis.progress = new Importer.Progress(this.name);\n\t\tthis.collection = Importer.RawImports;\n\n\t\tconst importId = Importer.Imports.insert({ 'type': this.name, 'ts': Date.now(), 'status': this.progress.step, 'valid': true, 'user': Meteor.user()._id });\n\t\tthis.importRecord = Importer.Imports.findOne(importId);\n\n\t\tthis.users = {};\n\t\tthis.channels = {};\n\t\tthis.messages = {};\n\t\tthis.oldSettings = {};\n\t}\n\n\t// Takes the uploaded file and extracts the users, channels, and messages from it.\n\t//\n\t// @param [String] dataURI a base64 string of the uploaded file\n\t// @param [String] sentContentType the file type\n\t// @param [String] fileName the name of the uploaded file\n\t//\n\t// @return [Importer.Selection] Contains two properties which are arrays of objects, `channels` and `users`.\n\t//\n\tprepare(dataURI, sentContentType, fileName) {\n\t\tconst fileType = this.getFileType(new Buffer(dataURI.split(',')[1], 'base64'));\n\t\tthis.logger.debug('Uploaded file information is:', fileType);\n\t\tthis.logger.debug('Expected file type is:', this.mimeType);\n\n\t\tif (!fileType || (fileType.mime !== this.mimeType)) {\n\t\t\tthis.logger.warn(`Invalid file uploaded for the ${ this.name } importer.`);\n\t\t\tthis.updateProgress(Importer.ProgressStep.ERROR);\n\t\t\tthrow new Meteor.Error('error-invalid-file-uploaded', `Invalid file uploaded to import ${ this.name } data from.`, { step: 'prepare' });\n\t\t}\n\n\t\tthis.updateProgress(Importer.ProgressStep.PREPARING_STARTED);\n\t\treturn this.updateRecord({ 'file': fileName });\n\t}\n\n\t// Starts the import process. The implementing method should defer as soon as the selection is set, so the user who started the process\n\t// doesn't end up with a \"locked\" ui while meteor waits for a response. The returned object should be the progress.\n\t//\n\t// @param [Importer.Selection] selectedUsersAndChannels an object with `channels` and `users` which contains information about which users and channels to import\n\t//\n\t// @return [Importer.Progress] the progress of the import\n\t//\n\tstartImport(importSelection) {\n\t\tif (importSelection === undefined) {\n\t\t\tthrow new Error(`No selected users and channel data provided to the ${ this.name } importer.`); //TODO: Make translatable\n\t\t} else if (importSelection.users === undefined) {\n\t\t\tthrow new Error(`Users in the selected data wasn't found, it must but at least an empty array for the ${ this.name } importer.`); //TODO: Make translatable\n\t\t} else if (importSelection.channels === undefined) {\n\t\t\tthrow new Error(`Channels in the selected data wasn't found, it must but at least an empty array for the ${ this.name } importer.`); //TODO: Make translatable\n\t\t}\n\n\t\treturn this.updateProgress(Importer.ProgressStep.IMPORTING_STARTED);\n\t}\n\n\t// Gets the Importer.Selection object for the import.\n\t//\n\t// @return [Importer.Selection] the users and channels selection\n\tgetSelection() {\n\t\tthrow new Error(`Invalid 'getSelection' called on ${ this.name }, it must be overridden and super can not be called.`);\n\t}\n\n\t// Gets the progress of this importer.\n\t//\n\t// @return [Importer.Progress] the progress of the import\n\t//\n\tgetProgress() {\n\t\treturn this.progress;\n\t}\n\n\t// Updates the progress step of this importer.\n\t//\n\t// @return [Importer.Progress] the progress of the import\n\t//\n\tupdateProgress(step) {\n\t\tthis.progress.step = step;\n\n\t\tswitch (step) {\n\t\t\tcase Importer.ProgressStep.IMPORTING_STARTED:\n\t\t\t\tthis.oldSettings.Accounts_AllowedDomainsList = RocketChat.models.Settings.findOneById('Accounts_AllowedDomainsList').value;\n\t\t\t\tRocketChat.models.Settings.updateValueById('Accounts_AllowedDomainsList', '');\n\n\t\t\t\tthis.oldSettings.Accounts_AllowUsernameChange = RocketChat.models.Settings.findOneById('Accounts_AllowUsernameChange').value;\n\t\t\t\tRocketChat.models.Settings.updateValueById('Accounts_AllowUsernameChange', true);\n\t\t\t\tbreak;\n\t\t\tcase Importer.ProgressStep.DONE:\n\t\t\tcase Importer.ProgressStep.ERROR:\n\t\t\t\tRocketChat.models.Settings.updateValueById('Accounts_AllowedDomainsList', this.oldSettings.Accounts_AllowedDomainsList);\n\t\t\t\tRocketChat.models.Settings.updateValueById('Accounts_AllowUsernameChange', this.oldSettings.Accounts_AllowUsernameChange);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis.logger.debug(`${ this.name } is now at ${ step }.`);\n\t\tthis.updateRecord({ 'status': this.progress.step });\n\n\t\treturn this.progress;\n\t}\n\n\t// Adds the passed in value to the total amount of items needed to complete.\n\t//\n\t// @return [Importer.Progress] the progress of the import\n\t//\n\taddCountToTotal(count) {\n\t\tthis.progress.count.total = this.progress.count.total + count;\n\t\tthis.updateRecord({ 'count.total': this.progress.count.total });\n\n\t\treturn this.progress;\n\t}\n\n\t// Adds the passed in value to the total amount of items completed.\n\t//\n\t// @return [Importer.Progress] the progress of the import\n\t//\n\taddCountCompleted(count) {\n\t\tthis.progress.count.completed = this.progress.count.completed + count;\n\n\t\t//Only update the database every 500 records\n\t\t//Or the completed is greater than or equal to the total amount\n\t\tif (((this.progress.count.completed % 500) === 0) || (this.progress.count.completed >= this.progress.count.total)) {\n\t\t\tthis.updateRecord({ 'count.completed': this.progress.count.completed });\n\t\t}\n\n\t\treturn this.progress;\n\t}\n\n\t// Updates the import record with the given fields being `set`\n\t//\n\t// @return [Importer.Imports] the import record object\n\t//\n\tupdateRecord(fields) {\n\t\tImporter.Imports.update({ _id: this.importRecord._id }, { $set: fields });\n\t\tthis.importRecord = Importer.Imports.findOne(this.importRecord._id);\n\n\t\treturn this.importRecord;\n\t}\n\n\t// Uploads the file to the storage.\n\t//\n\t// @param [Object] details an object with details about the upload. name, size, type, and rid\n\t// @param [String] fileUrl url of the file to download/import\n\t// @param [Object] user the Rocket.Chat user\n\t// @param [Object] room the Rocket.Chat room\n\t// @param [Date] timeStamp the timestamp the file was uploaded\n\t//\n\tuploadFile(details, fileUrl, user, room, timeStamp) {\n\t\tthis.logger.debug(`Uploading the file ${ details.name } from ${ fileUrl }.`);\n\t\tconst requestModule = /https/i.test(fileUrl) ? this.https : this.http;\n\n\t\tconst fileStore = FileUpload.getStore('Uploads');\n\n\t\treturn requestModule.get(fileUrl, Meteor.bindEnvironment(function(res) {\n\t\t\tconst rawData = [];\n\t\t\tres.on('data', chunk => rawData.push(chunk));\n\t\t\tres.on('end', Meteor.bindEnvironment(() => {\n\t\t\t\tfileStore.insert(details, Buffer.concat(rawData), function(err, file) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tthrow new Error(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst url = file.url.replace(Meteor.absoluteUrl(), '/');\n\n\t\t\t\t\t\tconst attachment = {\n\t\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\t\ttitle_link: url\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (/^image\\/.+/.test(file.type)) {\n\t\t\t\t\t\t\tattachment.image_url = url;\n\t\t\t\t\t\t\tattachment.image_type = file.type;\n\t\t\t\t\t\t\tattachment.image_size = file.size;\n\t\t\t\t\t\t\tattachment.image_dimensions = file.identify != null ? file.identify.size : undefined;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/^audio\\/.+/.test(file.type)) {\n\t\t\t\t\t\t\tattachment.audio_url = url;\n\t\t\t\t\t\t\tattachment.audio_type = file.type;\n\t\t\t\t\t\t\tattachment.audio_size = file.size;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (/^video\\/.+/.test(file.type)) {\n\t\t\t\t\t\t\tattachment.video_url = url;\n\t\t\t\t\t\t\tattachment.video_type = file.type;\n\t\t\t\t\t\t\tattachment.video_size = file.size;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst msg = {\n\t\t\t\t\t\t\trid: details.rid,\n\t\t\t\t\t\t\tts: timeStamp,\n\t\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\t\tfile: {\n\t\t\t\t\t\t\t\t_id: file._id\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgroupable: false,\n\t\t\t\t\t\t\tattachments: [attachment]\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif ((details.message_id != null) && (typeof details.message_id === 'string')) {\n\t\t\t\t\t\t\tmsg['_id'] = details.message_id;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn RocketChat.sendMessage(user, msg, room, true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}));\n\t\t}));\n\t}\n};\n","/* globals Importer */\n// Class for all the progress of the importers to use.\nImporter.Progress = (Importer.Progress = class Progress {\n\t// Constructs a new progress object.\n\t//\n\t// @param [String] name the name of the Importer\n\t//\n\tconstructor(name) {\n\t\tthis.name = name;\n\t\tthis.step = Importer.ProgressStep.NEW;\n\t\tthis.count = { completed: 0, total: 0 };\n\t}\n});\n","/* globals Importer */\n// \"ENUM\" of the import step, the value is the translation string\nImporter.ProgressStep = Object.freeze({\n\tNEW: 'importer_new',\n\tPREPARING_STARTED: 'importer_preparing_started',\n\tPREPARING_USERS: 'importer_preparing_users',\n\tPREPARING_CHANNELS: 'importer_preparing_channels',\n\tPREPARING_MESSAGES: 'importer_preparing_messages',\n\tUSER_SELECTION: 'importer_user_selection',\n\tIMPORTING_STARTED: 'importer_importing_started',\n\tIMPORTING_USERS: 'importer_importing_users',\n\tIMPORTING_CHANNELS: 'importer_importing_channels',\n\tIMPORTING_MESSAGES: 'importer_importing_messages',\n\tFINISHING: 'importer_finishing',\n\tDONE: 'importer_done',\n\tERROR: 'importer_import_failed',\n\tCANCELLED: 'importer_import_cancelled'\n});\n","/* globals Importer */\n// Class for all the selection of users and channels for the importers\nImporter.Selection = (Importer.Selection = class Selection {\n\t// Constructs a new importer selection object.\n\t//\n\t// @param [String] name the name of the Importer\n\t// @param [Array<Importer.User>] users the array of users\n\t// @param [Array<Importer.Channel>] channels the array of channels\n\t// @param [Integer] number of collected messages\n\t//\n\tconstructor(name, users, channels, message_count) {\n\t\tthis.name = name;\n\t\tthis.users = users;\n\t\tthis.channels = channels;\n\t\tthis.message_count = message_count;\n\t}\n});\n","/* globals Importer */\n//  Class for the selection channels for ImporterSelection\nImporter.SelectionChannel = (Importer.SelectionChannel = class SelectionChannel {\n\t// Constructs a new selection channel.\n\t//\n\t// @param [String] channel_id the unique identifier of the channel\n\t// @param [String] name the name of the channel\n\t// @param [Boolean] is_archived whether the channel was archived or not\n\t// @param [Boolean] do_import whether we will be importing the channel or not\n\t// @param [Boolean] is_private whether the channel is private or public\n\t//\n\tconstructor(channel_id, name, is_archived, do_import, is_private) {\n\t\tthis.channel_id = channel_id;\n\t\tthis.name = name;\n\t\tthis.is_archived = is_archived;\n\t\tthis.do_import = do_import;\n\t\tthis.is_private = is_private;\n\t}\n});\n//TODO: Add some verification?\n","/* globals Importer */\n// Class for the selection users for ImporterSelection\nImporter.SelectionUser = (Importer.SelectionUser = class SelectionUser {\n\t// Constructs a new selection user.\n\t//\n\t// @param [String] user_id the unique user identifier\n\t// @param [String] username the user's username\n\t// @param [String] email the user's email\n\t// @param [Boolean] is_deleted whether the user was deleted or not\n\t// @param [Boolean] is_bot whether the user is a bot or not\n\t// @param [Boolean] do_import whether we are going to import this user or not\n\t//\n\tconstructor(user_id, username, email, is_deleted, is_bot, do_import) {\n\t\tthis.user_id = user_id;\n\t\tthis.username = username;\n\t\tthis.email = email;\n\t\tthis.is_deleted = is_deleted;\n\t\tthis.is_bot = is_bot;\n\t\tthis.do_import = do_import;\n\t}\n});\n//TODO: Add some verification?\n","/* globals Importer */\nImporter.Imports = new (Importer.Imports = class Imports extends RocketChat.models._Base {\n\tconstructor() {\n\t\tsuper('import');\n\t}\n});\n","/* globals Importer */\nImporter.RawImports = new (Importer.RawImports = class RawImports extends RocketChat.models._Base {\n\tconstructor() {\n\t\tsuper('raw_imports');\n\t}\n});\n","/* globals Importer */\nMeteor.methods({\n\tgetImportProgress(name) {\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'getImportProgress' });\n\t\t}\n\n\t\tif (!RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', { method: 'setupImporter'});\n\t\t}\n\n\t\tif (Importer.Importers[name] != null) {\n\t\t\treturn (Importer.Importers[name].importerInstance != null ? Importer.Importers[name].importerInstance.getProgress() : undefined);\n\t\t} else {\n\t\t\tthrow new Meteor.Error('error-importer-not-defined', 'The importer was not defined correctly, it is missing the Import class.', { method: 'getImportProgress' });\n\t\t}\n\t}});\n","/* globals Importer */\nMeteor.methods({\n\tgetSelectionData(name) {\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'getSelectionData' });\n\t\t}\n\n\t\tif (!RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', { method: 'setupImporter'});\n\t\t}\n\n\t\tif ((Importer.Importers[name] != null ? Importer.Importers[name].importerInstance : undefined) != null) {\n\t\t\tconst progress = Importer.Importers[name].importerInstance.getProgress();\n\t\t\tswitch (progress.step) {\n\t\t\t\tcase Importer.ProgressStep.USER_SELECTION:\n\t\t\t\t\treturn Importer.Importers[name].importerInstance.getSelection();\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Meteor.Error('error-importer-not-defined', 'The importer was not defined correctly, it is missing the Import class.', { method: 'getSelectionData' });\n\t\t}\n\t}});\n","/* globals Importer */\n\nMeteor.methods({\n\tprepareImport(name, dataURI, contentType, fileName) {\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'prepareImport' });\n\t\t}\n\n\t\tif (!RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', { method: 'setupImporter'});\n\t\t}\n\n\t\tcheck(name, String);\n\t\tcheck(dataURI, String);\n\t\tcheck(fileName, String);\n\n\t\tif (name && Importer.Importers[name] && Importer.Importers[name].importerInstance) {\n\t\t\tconst results = Importer.Importers[name].importerInstance.prepare(dataURI, contentType, fileName);\n\n\t\t\tif (typeof results === 'object') {\n\t\t\t\tif (results instanceof Promise) {\n\t\t\t\t\treturn results.catch(e => { throw new Meteor.Error(e); });\n\t\t\t\t} else {\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!name) {\n\t\t\tthrow new Meteor.Error('error-importer-not-defined', `No Importer Found: \"${ name }\"`, { method: 'prepareImport' });\n\t\t} else {\n\t\t\tthrow new Meteor.Error('error-importer-not-defined', `The importer, \"${ name }\", was not defined correctly, it is missing the Import class.`, { method: 'prepareImport' });\n\t\t}\n\t}\n});\n","/* globals Importer*/\nMeteor.methods({\n\trestartImport(name) {\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'restartImport' });\n\t\t}\n\n\t\tif (!RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', { method: 'setupImporter'});\n\t\t}\n\n\t\tif (Importer.Importers[name] != null) {\n\t\t\tconst importer = Importer.Importers[name];\n\t\t\timporter.importerInstance.updateProgress(Importer.ProgressStep.CANCELLED);\n\t\t\timporter.importerInstance.updateRecord({ valid: false });\n\t\t\timporter.importerInstance = undefined;\n\t\t\timporter.importerInstance = new importer.importer(importer.name, importer.description, importer.mimeType); // eslint-disable-line new-cap\n\t\t\treturn importer.importerInstance.getProgress();\n\t\t} else {\n\t\t\tthrow new Meteor.Error('error-importer-not-defined', 'The importer was not defined correctly, it is missing the Import class.', { method: 'restartImport' });\n\t\t}\n\t}});\n","/* globals Importer */\nMeteor.methods({\n\tsetupImporter(name) {\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'setupImporter' });\n\t\t}\n\n\t\tif (!RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', { method: 'setupImporter'});\n\t\t}\n\n\t\tif ((Importer.Importers[name] != null ? Importer.Importers[name].importer : undefined) != null) {\n\t\t\tconst importer = Importer.Importers[name];\n\t\t\t// If they currently have progress, get it and return the progress.\n\t\t\tif (importer.importerInstance) {\n\t\t\t\treturn importer.importerInstance.getProgress();\n\t\t\t} else {\n\t\t\t\timporter.importerInstance = new importer.importer(importer.name, importer.description, importer.mimeType); //eslint-disable-line new-cap\n\t\t\t\treturn importer.importerInstance.getProgress();\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(`Tried to setup ${ name } as an importer.`);\n\t\t\tthrow new Meteor.Error('error-importer-not-defined', 'The importer was not defined correctly, it is missing the Import class.', { method: 'setupImporter' });\n\t\t}\n\t}});\n","/* globals Importer */\nMeteor.methods({\n\tstartImport(name, input) {\n\t\t// Takes name and object with users / channels selected to import\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'startImport' });\n\t\t}\n\n\t\tif (!RocketChat.authz.hasPermission(Meteor.userId(), 'run-import')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Importing is not allowed', { method: 'startImport'});\n\t\t}\n\n\t\tif (!name) {\n\t\t\tthrow new Meteor.Error('error-invalid-importer', `No defined importer by: \"${ name }\"`, { method: 'startImport' });\n\t\t}\n\n\t\tif (Importer.Importers[name] && Importer.Importers[name].importerInstance) {\n\t\t\tconst usersSelection = input.users.map(user => new Importer.SelectionUser(user.user_id, user.username, user.email, user.is_deleted, user.is_bot, user.do_import));\n\t\t\tconst channelsSelection = input.channels.map(channel => new Importer.SelectionChannel(channel.channel_id, channel.name, channel.is_archived, channel.do_import));\n\n\t\t\tconst selection = new Importer.Selection(name, usersSelection, channelsSelection);\n\t\t\treturn Importer.Importers[name].importerInstance.startImport(selection);\n\t\t} else {\n\t\t\tthrow new Meteor.Error('error-importer-not-defined', 'The importer was not defined correctly, it is missing the Import class.', { method: 'startImport' });\n\t\t}\n\t}});\n","/* globals Importer */\nMeteor.startup(function() {\n\t// Make sure all imports are marked as invalid, data clean up since you can't\n\t// restart an import at the moment.\n\tImporter.Imports.update({ valid: { $ne: false } }, { $set: { valid: false } }, { multi: true });\n\n\t// Clean up all the raw import data, since you can't restart an import at the moment\n\treturn Importer.Imports.find({ valid: { $ne: true }}).forEach(item => Importer.RawImports.remove({ 'import': item._id, 'importer': item.type }));\n});\n"]}