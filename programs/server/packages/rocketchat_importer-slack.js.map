{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:importer-slack/server.js","meteor://ðŸ’»app/packages/rocketchat:importer-slack/main.js"],"names":["Importer","Slack","name","descriptionI18N","mimeType","userTags","bots","logger","debug","prepare","dataURI","sentContentType","fileName","RocketChatFile","dataURIParse","image","zip","AdmZip","Buffer","zipEntries","getEntries","tempChannels","tempUsers","tempMessages","forEach","entry","entryName","indexOf","updateProgress","ProgressStep","PREPARING_CHANNELS","JSON","parse","getData","toString","filter","channel","creator","PREPARING_USERS","user","is_bot","profile","bot_id","isDirectory","item","split","channelName","msgGroupData","error","warn","usersId","collection","insert","importRecord","_id","users","findOne","updateRecord","length","addCountToTotal","channelsId","channels","PREPARING_MESSAGES","messagesCount","Object","keys","messagesObj","messages","msgs","date","Base","getBSONSize","MaxBSONSize","tmp","getBSONSafeArraysFromAnArray","splitMsg","i","messagesId","some","e","console","log","ERROR","getProgress","selectionUsers","map","SelectionUser","id","email","deleted","selectionChannels","SelectionChannel","is_archived","selectionMessages","count","USER_SELECTION","Selection","startImport","importSelection","start","Date","now","key","u","k","user_id","do_import","update","$set","c","channel_id","startedByUserId","Meteor","userId","defer","IMPORTING_USERS","runAsUser","existantUser","RocketChat","models","Users","findOneByEmailAddress","findOneByUsername","rocketId","$addToSet","importIds","push","slack","slackLong","rocket","username","Accounts","createUser","password","toUpperCase","joinDefaultChannelsSilenced","call","url","image_original","image_512","undefined","tz_offset","real_name","setName","addCountCompleted","IMPORTING_CHANNELS","existantRoom","Rooms","findOneByName","is_general","members","reduce","ret","member","getRocketUser","returned","rid","roomUpdate","ts","created","_","isEmpty","topic","value","purpose","description","missedTypes","ignoreTypes","IMPORTING_MESSAGES","slackChannel","getSlackChannelFromName","room","findOneById","fields","usernames","t","msgDataDefaults","message","replace","parseInt","reactions","reaction","rcUser","type","subtype","Messages","createUserJoinWithRoomIdAndUser","createUserLeaveWithRoomIdAndUser","msgObj","msg","convertSlackMessageToRocketChat","text","sendMessage","botUser","botUsername","bot","attachments","edited","editedAt","editedBy","icons","emoji","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","createRoomRenamedWithRoomIdRoomNameAndUser","author_subname","getAvatarUrlFromUsername","createWithTypeRoomIdMessageAndUser","file","url_private_download","details","message_id","size","mimetype","uploadFile","FINISHING","DONE","timeTook","find","slackId","Array","from","userReplace","getSelection","addImporter"],"mappings":"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","file":"/packages/rocketchat_importer-slack.js","sourcesContent":["/* globals Importer */\nImporter.Slack = class extends Importer.Base {\n\tconstructor(name, descriptionI18N, mimeType) {\n\t\tsuper(name, descriptionI18N, mimeType);\n\t\tthis.userTags = [];\n\t\tthis.bots = {};\n\t\tthis.logger.debug('Constructed a new Slack Importer.');\n\t}\n\n\tprepare(dataURI, sentContentType, fileName) {\n\t\tsuper.prepare(dataURI, sentContentType, fileName);\n\n\t\tconst { image } = RocketChatFile.dataURIParse(dataURI);\n\t\tconst zip = new this.AdmZip(new Buffer(image, 'base64'));\n\t\tconst zipEntries = zip.getEntries();\n\n\t\tlet tempChannels = [];\n\t\tlet tempUsers = [];\n\t\tconst tempMessages = {};\n\n\t\tzipEntries.forEach(entry => {\n\t\t\tif (entry.entryName.indexOf('__MACOSX') > -1) {\n\t\t\t\treturn this.logger.debug(`Ignoring the file: ${ entry.entryName }`);\n\t\t\t}\n\n\t\t\tif (entry.entryName === 'channels.json') {\n\t\t\t\tthis.updateProgress(Importer.ProgressStep.PREPARING_CHANNELS);\n\t\t\t\ttempChannels = JSON.parse(entry.getData().toString()).filter(channel => channel.creator != null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (entry.entryName === 'users.json') {\n\t\t\t\tthis.updateProgress(Importer.ProgressStep.PREPARING_USERS);\n\t\t\t\ttempUsers = JSON.parse(entry.getData().toString());\n\n\t\t\t\ttempUsers.forEach(user => {\n\t\t\t\t\tif (user.is_bot) {\n\t\t\t\t\t\tthis.bots[user.profile.bot_id] = user;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!entry.isDirectory && entry.entryName.indexOf('/') > -1) {\n\t\t\t\tconst item = entry.entryName.split('/');\n\t\t\t\tconst channelName = item[0];\n\t\t\t\tconst msgGroupData = item[1].split('.')[0];\n\t\t\t\ttempMessages[channelName] = tempMessages[channelName] || {};\n\n\t\t\t\ttry {\n\t\t\t\t\ttempMessages[channelName][msgGroupData] = JSON.parse(entry.getData().toString());\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logger.warn(`${ entry.entryName } is not a valid JSON file! Unable to import it.`);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// Insert the users record, eventually this might have to be split into several ones as well\n\t\t// if someone tries to import a several thousands users instance\n\t\tconst usersId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'users', 'users': tempUsers });\n\t\tthis.users = this.collection.findOne(usersId);\n\t\tthis.updateRecord({ 'count.users': tempUsers.length });\n\t\tthis.addCountToTotal(tempUsers.length);\n\n\t\t// Insert the channels records.\n\t\tconst channelsId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'channels', 'channels': tempChannels });\n\t\tthis.channels = this.collection.findOne(channelsId);\n\t\tthis.updateRecord({ 'count.channels': tempChannels.length });\n\t\tthis.addCountToTotal(tempChannels.length);\n\n\t\t// Insert the messages records\n\t\tthis.updateProgress(Importer.ProgressStep.PREPARING_MESSAGES);\n\n\t\tlet messagesCount = 0;\n\t\tObject.keys(tempMessages).forEach(channel => {\n\t\t\tconst messagesObj = tempMessages[channel];\n\t\t\tthis.messages[channel] = this.messages[channel] || {};\n\n\t\t\tObject.keys(messagesObj).forEach(date => {\n\t\t\t\tconst msgs = messagesObj[date];\n\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\tthis.updateRecord({ 'messagesstatus': `${ channel }/${ date }` });\n\t\t\t\tif (Importer.Base.getBSONSize(msgs) > Importer.Base.MaxBSONSize) {\n\t\t\t\t\tconst tmp = Importer.Base.getBSONSafeArraysFromAnArray(msgs);\n\t\t\t\t\tObject.keys(tmp).forEach(i => {\n\t\t\t\t\t\tconst splitMsg = tmp[i];\n\t\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'messages', 'name': `${ channel }/${ date }.${ i }`, 'messages': splitMsg });\n\t\t\t\t\t\tthis.messages[channel][`${ date }.${ i }`] = this.collection.findOne(messagesId);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'messages', 'name': `${ channel }/${ date }`, 'messages': msgs });\n\t\t\t\t\tthis.messages[channel][date] = this.collection.findOne(messagesId);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });\n\t\tthis.addCountToTotal(messagesCount);\n\t\tif ([tempUsers.length, tempChannels.length, messagesCount].some(e => e === 0)) {\n\t\t\tthis.logger.warn(`The loaded users count ${ tempUsers.length }, the loaded channels ${ tempChannels.length }, and the loaded messages ${ messagesCount }`);\n\t\t\tconsole.log(`The loaded users count ${ tempUsers.length }, the loaded channels ${ tempChannels.length }, and the loaded messages ${ messagesCount }`);\n\t\t\tthis.updateProgress(Importer.ProgressStep.ERROR);\n\t\t\treturn this.getProgress();\n\t\t}\n\t\tconst selectionUsers = tempUsers.map(user => new Importer.SelectionUser(user.id, user.name, user.profile.email, user.deleted, user.is_bot, !user.is_bot));\n\t\tconst selectionChannels = tempChannels.map(channel => new Importer.SelectionChannel(channel.id, channel.name, channel.is_archived, true, false));\n\t\tconst selectionMessages = this.importRecord.count.messages;\n\t\tthis.updateProgress(Importer.ProgressStep.USER_SELECTION);\n\t\treturn new Importer.Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n\t}\n\tstartImport(importSelection) {\n\t\tsuper.startImport(importSelection);\n\t\tconst start = Date.now();\n\n\t\tObject.keys(importSelection.users).forEach(key => {\n\t\t\tconst user = importSelection.users[key];\n\t\t\tObject.keys(this.users.users).forEach(k => {\n\t\t\t\tconst u = this.users.users[k];\n\t\t\t\tif (u.id === user.user_id) {\n\t\t\t\t\tu.do_import = user.do_import;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tthis.collection.update({ _id: this.users._id }, { $set: { 'users': this.users.users }});\n\n\t\tObject.keys(importSelection.channels).forEach(key => {\n\t\t\tconst channel = importSelection.channels[key];\n\t\t\tObject.keys(this.channels.channels).forEach(k => {\n\t\t\t\tconst c = this.channels.channels[k];\n\t\t\t\tif (c.id === channel.channel_id) {\n\t\t\t\t\tc.do_import = channel.do_import;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tthis.collection.update({ _id: this.channels._id }, { $set: { 'channels': this.channels.channels }});\n\n\t\tconst startedByUserId = Meteor.userId();\n\t\tMeteor.defer(() => {\n\t\t\ttry {\n\t\t\t\tthis.updateProgress(Importer.ProgressStep.IMPORTING_USERS);\n\t\t\t\tthis.users.users.forEach(user => {\n\t\t\t\t\tif (!user.do_import) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst existantUser = RocketChat.models.Users.findOneByEmailAddress(user.profile.email) || RocketChat.models.Users.findOneByUsername(user.name);\n\t\t\t\t\t\tif (existantUser) {\n\t\t\t\t\t\t\tuser.rocketId = existantUser._id;\n\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: user.rocketId }, { $addToSet: { importIds: user.id } });\n\t\t\t\t\t\t\tthis.userTags.push({\n\t\t\t\t\t\t\t\tslack: `<@${ user.id }>`,\n\t\t\t\t\t\t\t\tslackLong: `<@${ user.id }|${ user.name }>`,\n\t\t\t\t\t\t\t\trocket: `@${ existantUser.username }`\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst userId = user.profile.email ? Accounts.createUser({ email: user.profile.email, password: Date.now() + user.name + user.profile.email.toUpperCase() }) : Accounts.createUser({ username: user.name, password: Date.now() + user.name, joinDefaultChannelsSilenced: true });\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tMeteor.call('setUsername', user.name, { joinDefaultChannelsSilenced: true });\n\n\t\t\t\t\t\t\t\tconst url = user.profile.image_original || user.profile.image_512;\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tMeteor.call('setAvatarFromService', url, undefined, 'url');\n\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\tthis.logger.warn(`Failed to set ${ user.name }'s avatar from url ${ url }`);\n\t\t\t\t\t\t\t\t\tconsole.log(`Failed to set ${ user.name }'s avatar from url ${ url }`);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Slack's is -18000 which translates to Rocket.Chat's after dividing by 3600\n\t\t\t\t\t\t\t\tif (user.tz_offset) {\n\t\t\t\t\t\t\t\t\tMeteor.call('userSetUtcOffset', user.tz_offset / 3600);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: userId }, { $addToSet: { importIds: user.id } });\n\n\t\t\t\t\t\t\tif (user.profile.real_name) {\n\t\t\t\t\t\t\t\tRocketChat.models.Users.setName(userId, user.profile.real_name);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//Deleted users are 'inactive' users in Rocket.Chat\n\t\t\t\t\t\t\tif (user.deleted) {\n\t\t\t\t\t\t\t\tMeteor.call('setUserActiveStatus', userId, false);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tuser.rocketId = userId;\n\t\t\t\t\t\t\tthis.userTags.push({\n\t\t\t\t\t\t\t\tslack: `<@${ user.id }>`,\n\t\t\t\t\t\t\t\tslackLong: `<@${ user.id }|${ user.name }>`,\n\t\t\t\t\t\t\t\trocket: `@${ user.name }`\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tthis.collection.update({ _id: this.users._id }, { $set: { 'users': this.users.users }});\n\n\t\t\t\tthis.updateProgress(Importer.ProgressStep.IMPORTING_CHANNELS);\n\t\t\t\tthis.channels.channels.forEach(channel => {\n\t\t\t\t\tif (!channel.do_import) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser (startedByUserId, () => {\n\t\t\t\t\t\tconst existantRoom = RocketChat.models.Rooms.findOneByName(channel.name);\n\t\t\t\t\t\tif (existantRoom || channel.is_general) {\n\t\t\t\t\t\t\tif (channel.is_general && existantRoom && channel.name !== existantRoom.name) {\n\t\t\t\t\t\t\t\tMeteor.call('saveRoomSettings', 'GENERAL', 'roomName', channel.name);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tchannel.rocketId = channel.is_general ? 'GENERAL' : existantRoom._id;\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: channel.rocketId }, { $addToSet: { importIds: channel.id } });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst users = channel.members\n\t\t\t\t\t\t\t\t.reduce((ret, member) => {\n\t\t\t\t\t\t\t\t\tif (member !== channel.creator) {\n\t\t\t\t\t\t\t\t\t\tconst user = this.getRocketUser(member);\n\t\t\t\t\t\t\t\t\t\tif (user && user.username) {\n\t\t\t\t\t\t\t\t\t\t\tret.push(user.username);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t\t\t}, []);\n\t\t\t\t\t\t\tlet userId = startedByUserId;\n\t\t\t\t\t\t\tthis.users.users.forEach(user => {\n\t\t\t\t\t\t\t\tif (user.id === channel.creator && user.do_import) {\n\t\t\t\t\t\t\t\t\tuserId = user.rocketId;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tconst returned = Meteor.call('createChannel', channel.name, users);\n\t\t\t\t\t\t\t\tchannel.rocketId = returned.rid;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// @TODO implement model specific function\n\t\t\t\t\t\t\tconst roomUpdate = {\n\t\t\t\t\t\t\t\tts: new Date(channel.created * 1000)\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (!_.isEmpty(channel.topic && channel.topic.value)) {\n\t\t\t\t\t\t\t\troomUpdate.topic = channel.topic.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!_.isEmpty(channel.purpose && channel.purpose.value)) {\n\t\t\t\t\t\t\t\troomUpdate.description = channel.purpose.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: channel.rocketId }, { $set: roomUpdate, $addToSet: { importIds: channel.id } });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tthis.collection.update({ _id: this.channels._id }, { $set: { 'channels': this.channels.channels }});\n\n\t\t\t\tconst missedTypes = {};\n\t\t\t\tconst ignoreTypes = { 'bot_add': true, 'file_comment': true, 'file_mention': true };\n\t\t\t\tthis.updateProgress(Importer.ProgressStep.IMPORTING_MESSAGES);\n\t\t\t\tObject.keys(this.messages).forEach(channel => {\n\t\t\t\t\tconst messagesObj = this.messages[channel];\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () =>{\n\t\t\t\t\t\tconst slackChannel = this.getSlackChannelFromName(channel);\n\t\t\t\t\t\tif (!slackChannel || !slackChannel.do_import) { return; }\n\t\t\t\t\t\tconst room = RocketChat.models.Rooms.findOneById(slackChannel.rocketId, { fields: { usernames: 1, t: 1, name: 1 } });\n\t\t\t\t\t\tObject.keys(messagesObj).forEach(date => {\n\t\t\t\t\t\t\tconst msgs = messagesObj[date];\n\t\t\t\t\t\t\tmsgs.messages.forEach(message => {\n\t\t\t\t\t\t\t\tthis.updateRecord({ 'messagesstatus': `${ channel }/${ date }.${ msgs.messages.length }` });\n\t\t\t\t\t\t\t\tconst msgDataDefaults ={\n\t\t\t\t\t\t\t\t\t_id: `slack-${ slackChannel.id }-${ message.ts.replace(/\\./g, '-') }`,\n\t\t\t\t\t\t\t\t\tts: new Date(parseInt(message.ts.split('.')[0]) * 1000)\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Process the reactions\n\t\t\t\t\t\t\t\tif (message.reactions && message.reactions.length > 0) {\n\t\t\t\t\t\t\t\t\tmsgDataDefaults.reactions = {};\n\n\t\t\t\t\t\t\t\t\tmessage.reactions.forEach(reaction => {\n\t\t\t\t\t\t\t\t\t\tmsgDataDefaults.reactions[reaction.name] = { usernames: [] };\n\n\t\t\t\t\t\t\t\t\t\treaction.users.forEach(u => {\n\t\t\t\t\t\t\t\t\t\t\tconst rcUser = this.getRocketUser(u);\n\t\t\t\t\t\t\t\t\t\t\tif (!rcUser) { return; }\n\n\t\t\t\t\t\t\t\t\t\t\tmsgDataDefaults.reactions[reaction.name].usernames.push(rcUser.username);\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\tif (msgDataDefaults.reactions[reaction.name].usernames.length === 0) {\n\t\t\t\t\t\t\t\t\t\t\tdelete msgDataDefaults.reactions[reaction.name];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (message.type === 'message') {\n\t\t\t\t\t\t\t\t\tif (message.subtype) {\n\t\t\t\t\t\t\t\t\t\tif (message.subtype === 'channel_join') {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getRocketUser(message.user)) {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createUserJoinWithRoomIdAndUser(room._id, this.getRocketUser(message.user), msgDataDefaults);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'channel_leave') {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getRocketUser(message.user)) {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createUserLeaveWithRoomIdAndUser(room._id, this.getRocketUser(message.user), msgDataDefaults);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'me_message') {\n\t\t\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t...msgDataDefaults,\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: `_${ this.convertSlackMessageToRocketChat(message.text) }_`\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(this.getRocketUser(message.user), msgObj, room, true);\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'bot_message' || message.subtype === 'slackbot_response') {\n\t\t\t\t\t\t\t\t\t\t\tconst botUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 }});\n\t\t\t\t\t\t\t\t\t\t\tconst botUsername = this.bots[message.bot_id] ? this.bots[message.bot_id].name : message.username;\n\t\t\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t...msgDataDefaults,\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: this.convertSlackMessageToRocketChat(message.text),\n\t\t\t\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\t\t\t\tbot: true,\n\t\t\t\t\t\t\t\t\t\t\t\tattachments: message.attachments,\n\t\t\t\t\t\t\t\t\t\t\t\tusername: botUsername || undefined\n\t\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\t\tif (message.edited) {\n\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\tconst editedBy = this.getRocketUser(message.edited.user);\n\t\t\t\t\t\t\t\t\t\t\t\tif (editedBy) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedBy = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_id: editedBy._id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tusername: editedBy.username\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tif (message.icons) {\n\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.emoji = message.icons.emoji;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(botUser, msgObj, room, true);\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'channel_purpose') {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getRocketUser(message.user)) {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_description', room._id, message.purpose, this.getRocketUser(message.user), msgDataDefaults);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'channel_topic') {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getRocketUser(message.user)) {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', room._id, message.topic, this.getRocketUser(message.user), msgDataDefaults);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'channel_name') {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getRocketUser(message.user)) {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomRenamedWithRoomIdRoomNameAndUser(room._id, message.name, this.getRocketUser(message.user), msgDataDefaults);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'pinned_item') {\n\t\t\t\t\t\t\t\t\t\t\tif (message.attachments) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t...msgDataDefaults,\n\t\t\t\t\t\t\t\t\t\t\t\t\tattachments: [{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'text': this.convertSlackMessageToRocketChat(message.attachments[0].text),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'author_name' : message.attachments[0].author_subname,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'author_icon' : getAvatarUrlFromUsername(message.attachments[0].author_subname)\n\t\t\t\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createWithTypeRoomIdMessageAndUser('message_pinned', room._id, '', this.getRocketUser(message.user), msgObj);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t//TODO: make this better\n\t\t\t\t\t\t\t\t\t\t\t\tthis.logger.debug('Pinned item with no attachment, needs work.');\n\t\t\t\t\t\t\t\t\t\t\t\t//RocketChat.models.Messages.createWithTypeRoomIdMessageAndUser 'message_pinned', room._id, '', @getRocketUser(message.user), msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'file_share') {\n\t\t\t\t\t\t\t\t\t\t\tif (message.file && message.file.url_private_download !== undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst details = {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage_id: `slack-${ message.ts.replace(/\\./g, '-') }`,\n\t\t\t\t\t\t\t\t\t\t\t\t\tname: message.file.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\tsize: message.file.size,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: message.file.mimetype,\n\t\t\t\t\t\t\t\t\t\t\t\t\trid: room._id\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\tthis.uploadFile(details, message.file.url_private_download, this.getRocketUser(message.user), room, new Date(parseInt(message.ts.split('.')[0]) * 1000));\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (!missedTypes[message.subtype] && !ignoreTypes[message.subtype]) {\n\t\t\t\t\t\t\t\t\t\t\tmissedTypes[message.subtype] = message;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tconst user = this.getRocketUser(message.user);\n\t\t\t\t\t\t\t\t\t\tif (user) {\n\t\t\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t...msgDataDefaults,\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: this.convertSlackMessageToRocketChat(message.text),\n\t\t\t\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\t\t\t\t\t\t\tusername: user.username\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\t\tif (message.edited) {\n\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\tconst editedBy = this.getRocketUser(message.edited.user);\n\t\t\t\t\t\t\t\t\t\t\t\tif (editedBy) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedBy = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_id: editedBy._id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tusername: editedBy.username\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(this.getRocketUser(message.user), msgObj, room, true);\n\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.logger.warn(`Failed to import the message: ${ msgDataDefaults._id }`);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.addCountCompleted(1);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tif (!_.isEmpty(missedTypes)) {\n\t\t\t\t\tconsole.log('Missed import types:', missedTypes);\n\t\t\t\t}\n\n\t\t\t\tthis.updateProgress(Importer.ProgressStep.FINISHING);\n\n\t\t\t\tthis.channels.channels.forEach(channel => {\n\t\t\t\t\tif (channel.do_import && channel.is_archived) {\n\t\t\t\t\t\tMeteor.runAsUser(startedByUserId, function() {\n\t\t\t\t\t\t\tMeteor.call('archiveRoom', channel.rocketId);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis.updateProgress(Importer.ProgressStep.DONE);\n\n\t\t\t\tconst timeTook = Date.now() - start;\n\n\t\t\t\tthis.logger.log(`Import took ${ timeTook } milliseconds.`);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t\tthis.updateProgress(Importer.ProgressStep.ERROR);\n\t\t\t}\n\t\t});\n\n\t\treturn this.getProgress();\n\t}\n\tgetSlackChannelFromName(channelName) {\n\t\treturn this.channels.channels.find(channel => channel.name === channelName);\n\t}\n\tgetRocketUser(slackId) {\n\t\tconst user = this.users.users.find(user => user.id === slackId);\n\t\tif (user) {\n\t\t\treturn RocketChat.models.Users.findOneById(user.rocketId, { fields: { username: 1, name: 1 }});\n\t\t}\n\t}\n\tconvertSlackMessageToRocketChat(message) {\n\t\tif (message != null) {\n\t\t\tmessage = message.replace(/<!everyone>/g, '@all');\n\t\t\tmessage = message.replace(/<!channel>/g, '@all');\n\t\t\tmessage = message.replace(/<!here>/g, '@here');\n\t\t\tmessage = message.replace(/&gt;/g, '>');\n\t\t\tmessage = message.replace(/&lt;/g, '<');\n\t\t\tmessage = message.replace(/&amp;/g, '&');\n\t\t\tmessage = message.replace(/:simple_smile:/g, ':smile:');\n\t\t\tmessage = message.replace(/:memo:/g, ':pencil:');\n\t\t\tmessage = message.replace(/:piggy:/g, ':pig:');\n\t\t\tmessage = message.replace(/:uk:/g, ':gb:');\n\t\t\tmessage = message.replace(/<(http[s]?:[^>]*)>/g, '$1');\n\t\t\tfor (const userReplace of Array.from(this.userTags)) {\n\t\t\t\tmessage = message.replace(userReplace.slack, userReplace.rocket);\n\t\t\t\tmessage = message.replace(userReplace.slackLong, userReplace.rocket);\n\t\t\t}\n\t\t} else {\n\t\t\tmessage = '';\n\t\t}\n\t\treturn message;\n\t}\n\tgetSelection() {\n\t\tconst selectionUsers = this.users.users.map(user => new Importer.SelectionUser(user.id, user.name, user.profile.email, user.deleted, user.is_bot, !user.is_bot));\n\t\tconst selectionChannels = this.channels.channels.map(channel => new Importer.SelectionChannel(channel.id, channel.name, channel.is_archived, true, false));\n\t\tconst selectionMessages = this.importRecord.count.messages;\n\t\treturn new Importer.Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n\t}\n};\n","/* globals Importer */\nImporter.addImporter('slack', Importer.Slack, {\n\tname: 'Slack',\n\tmimeType: 'application/zip'\n});\n"]}