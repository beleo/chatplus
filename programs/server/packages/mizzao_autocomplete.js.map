{"version":3,"sources":["meteor://ðŸ’»app/packages/mizzao:autocomplete/server/autocomplete-server.js"],"names":["Autocomplete","publishCursor","cursor","sub","Mongo","Collection","_publishCursor","Meteor","publish","selector","options","collName","collection","global","Error","_isInsecure","_debug","limit","Math","min","abs","find","ready"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA,IAAMA;AAAA;AAAA;AAAA;;AAAA,wBACLC,aADK;AAAA,yBACSC,MADT,EACiBC,GADjB,EACsB;AAC1BC,SAAMC,UAAN,CAAiBC,cAAjB,CAAgCJ,MAAhC,EAAwCC,GAAxC,EAA6C,qBAA7C;AACA;;AAHI;AAAA;;AAAA;AAAA,GAAN;;AAMAI,OAAOC,OAAP,CAAe,wBAAf,EAAyC,UAASC,QAAT,EAAmBC,OAAnB,EAA4BC,QAA5B,EAAsC;AAC9E,KAAMC,aAAaC,OAAOF,QAAP,CAAnB,CAD8E,CAG9E;AACA;;AACA,KAAI,CAACC,UAAL,EAAiB;AAChB,QAAM,IAAIE,KAAJ,CAAcH,QAAd,4DAAN;AACA;;AACD,KAAI,CAACC,WAAWG,WAAX,EAAL,EAA+B;AAC9BR,SAAOS,MAAP,CAAkBL,QAAlB;;AACA,SAAO,EAAP,CAF8B,CAEnB;AACX;;AACD,KAAID,QAAQO,KAAZ,EAAmB;AAClB;AACAP,UAAQO,KAAR,GAAgBC,KAAKC,GAAL,CAAS,EAAT,EAAaD,KAAKE,GAAL,CAASV,QAAQO,KAAjB,CAAb,CAAhB;AACA,EAf6E,CAiB9E;AACA;;;AACAjB,cAAaC,aAAb,CAA2BW,WAAWS,IAAX,CAAgBZ,QAAhB,EAA0BC,OAA1B,CAA3B,EAA+D,IAA/D,EAnB8E,CAoB9E;;AACA,MAAKY,KAAL;AACA,CAtBD,sG","file":"/packages/mizzao_autocomplete.js","sourcesContent":["// This also attaches an onStop callback to sub, so we don't need to worry about that.\n// https://github.com/meteor/meteor/blob/devel/packages/mongo/collection.js\nconst Autocomplete = class {\n\tpublishCursor(cursor, sub) {\n\t\tMongo.Collection._publishCursor(cursor, sub, 'autocompleteRecords');\n\t}\n};\n\nMeteor.publish('autocomplete-recordset', function(selector, options, collName) {\n\tconst collection = global[collName];\n\n\t// This is a semi-documented Meteor feature:\n\t// https://github.com/meteor/meteor/blob/devel/packages/mongo-livedata/collection.js\n\tif (!collection) {\n\t\tthrow new Error(`${ collName } is not defined on the global namespace of the server.`);\n\t}\n\tif (!collection._isInsecure()) {\n\t\tMeteor._debug(`${ collName } is a secure collection, therefore no data was returned because the client could compromise security by subscribing to arbitrary server collections via the browser console. Please write your own publish function.`);\n\t\treturn []; // We need this for the subscription to be marked ready\n\t}\n\tif (options.limit) {\n\t\t// guard against client-side DOS: hard limit to 50\n\t\toptions.limit = Math.min(50, Math.abs(options.limit));\n\t}\n\n\t// Push this into our own collection on the client so they don't interfere with other publications of the named collection.\n\t// This also stops the observer automatically when the subscription is stopped.\n\tAutocomplete.publishCursor(collection.find(selector, options), this);\n\t// Mark the subscription ready after the initial addition of documents.\n\tthis.ready();\n});\n"]}